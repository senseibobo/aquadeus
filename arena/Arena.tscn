[gd_scene load_steps=6 format=2]

[ext_resource path="res://characters/neptune/Neptune.tscn" type="PackedScene" id=1]
[ext_resource path="res://characters/poseidon/Poseidon.tscn" type="PackedScene" id=2]
[ext_resource path="res://arena/Arena.gd" type="Script" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

vec3 hash(vec3 p) {
  return fract(
      sin(vec3(dot(p, vec3(1.0, 57.0, 113.0)), dot(p, vec3(57.0, 113.0, 1.0)),
               dot(p, vec3(113.0, 1.0, 57.0)))) *
      43758.5453);
}

vec3 voronoi3d(const in vec3 x) {
  vec3 p = floor(x);
  vec3 f = fract(x);

  float id = 0.0;
  vec2 res = vec2(100.0);
  for (int k = -1; k <= 1; k++) {
    for (int j = -1; j <= 1; j++) {
      for (int i = -1; i <= 1; i++) {
        vec3 b = vec3(float(i), float(j), float(k));
        vec3 r = vec3(b) - f + hash(p + b);
        float d = dot(r, r);

        float cond = max(sign(res.x - d), 0.0);
        float nCond = 1.0 - cond;

        float cond2 = nCond * max(sign(res.y - d), 0.0);
        float nCond2 = 1.0 - cond2;

        id = (dot(p + b, vec3(1.0, 57.0, 113.0)) * cond) + (id * nCond);
        res = vec2(d, res.x) * cond + res * nCond;

        res.y = cond2 * d + nCond2 * res.y;
      }
    }
  }

  return vec3(sqrt(res), abs(id));
}

void fragment() {
	COLOR.rgb = vec3(0.0);
	float n = voronoi3d(vec3(20.0*SCREEN_UV.x,20.0*SCREEN_UV.y,TIME/3.0)).r;
	COLOR.b = 1.0;
	COLOR.rg = vec2(0.5-n/3.0);
	COLOR.rgb += vec3(0.5);
	COLOR.a = 0.4;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[node name="Arena" type="Node2D"]
script = ExtResource( 3 )

[node name="Neptun" parent="." instance=ExtResource( 1 )]
position = Vector2( 159, 322 )

[node name="Poseidon" parent="." instance=ExtResource( 2 )]
position = Vector2( 884, 309 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="ColorRect" type="ColorRect" parent="CanvasLayer"]
visible = false
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
